datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ProgressionBucket {
  veryLow
  low
  mid
  high
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?

  accounts    Account[]
  decks       Deck[]
  progression UserProgressionHistory[]

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  UserProgressionEntry UserProgressionEntry[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Deck {
  id               Int      @id @default(autoincrement())
  name             String
  isQuizNormal     Boolean
  isQuizReversed   Boolean
  isQuizTyping     Boolean
  isQuizRandomized Boolean
  isPrivate        Boolean
  createdAt        DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  cards Card[]

  @@index([userId])
}

model Card {
  id                 Int       @id @default(autoincrement())
  front              String
  back               String
  context            String?
  intervalStrength   Float?
  nextRepetitionTime DateTime?
  createdAt          DateTime  @default(now())

  deckId               Int
  deck                 Deck                   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  UserProgressionEntry UserProgressionEntry[]

  @@index([deckId])
}

model UserProgressionHistory {
  id                     Int      @id @default(autoincrement())
  userId                 String
  createdAt              DateTime
  lastModifiedAt         DateTime
  highIndicationCount    Int
  midIndicationCount     Int
  lowIndicationCount     Int
  veryLowIndicationCount Int
  User                   User     @relation(fields: [userId], references: [id])

  @@unique([userId, createdAt])
}

model UserProgressionEntry {
  id         Int      @id @default(autoincrement())
  userId     String
  cardId     Int
  bucket     String
  lastSeenAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([userId, cardId])
  @@index([userId])
}
